# os module
```python
import os

# Get current working directory
current_directory = os.getcwd()
print("Current Directory:", current_directory)

# List files in current directory
files = os.listdir(current_directory)
print("Files:", files)

```
Automating repetitive tasks in DevOps is a crucial part of streamlining workflows and increasing efficiency.
Python has several powerful modules that can help with automation in DevOps environments. 
Here are some important ones along with use cases and example code:

### 1. **`subprocess`**

**Use Case**: Automate execution of shell commands and scripts.

**Example**: Running a shell command to check disk usage.

```python
import subprocess

# Run the 'df -h' command to check disk usage
result = subprocess.run(['df', '-h'], capture_output=True, text=True)

# Print the command output
print(result.stdout)
```

### 2. **`paramiko`**

**Use Case**: Automate SSH connections and execute commands on remote servers.

**Example**: Connecting to a remote server via SSH and executing a command.

```python
import paramiko

# Define SSH credentials and server details
hostname = 'your.server.com'
port = 22
username = 'your_username'
password = 'your_password'

# Create an SSH client
client = paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

# Connect to the server
client.connect(hostname, port, username, password)

# Execute a command on the remote server
stdin, stdout, stderr = client.exec_command('uptime')

# Print the command output
print(stdout.read().decode())

# Close the connection
client.close()
```

### 3. **`fabric`**

**Use Case**: Simplify SSH command execution and deployments.

**Example**: Using Fabric to deploy a web application.

```python
from fabric import Connection

def deploy():
    # Create a connection to the server
    conn = Connection('your.server.com', user='your_username', connect_kwargs={'password': 'your_password'})
    
    # Execute commands to deploy the application
    conn.run('cd /path/to/your/app && git pull origin main')
    conn.run('sudo systemctl restart your_service')

if __name__ == "__main__":
    deploy()
```

### 4. **`ansible`**

**Use Case**: Configuration management and automation of deployment tasks.

**Example**: Use Ansible's Python API to run a playbook.

```python
import ansible_runner

# Run an Ansible playbook
runner = ansible_runner.run(playbook='your_playbook.yml')

# Print the results
print(f"Status: {runner.status}")
print(f"Results: {runner.stdout.read()}")
```

### 5. **`requests`**

**Use Case**: Automate interactions with REST APIs.

**Example**: Making an API call to check the status of a web service.

```python
import requests

# Define the API endpoint and parameters
url = 'https://api.yourservice.com/status'

# Make a GET request
response = requests.get(url)

# Print the JSON response
print(response.json())
```

### 6. **`schedule`**

**Use Case**: Automate recurring tasks.

**Example**: Schedule a task to run a script every day at a specific time.

```python
import schedule
import time

def job():
    print("Running scheduled task...")

# Schedule the job every day at 3 PM
schedule.every().day.at("15:00").do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
```

### 7. **`dotenv`**

**Use Case**: Manage environment variables from `.env` files.

**Example**: Loading environment variables for configuration.

```python
from dotenv import load_dotenv
import os

# Load environment variables from a .env file
load_dotenv()

# Access the environment variables
database_url = os.getenv('DATABASE_URL')
print(f"Database URL: {database_url}")
```

### Summary

These Python modules and tools provide a wide range of functionality for automating tasks in a DevOps environment, including:

- **`subprocess`**: Running shell commands.
- **`paramiko`**: SSH connections and remote command execution.
- **`fabric`**: Simplified SSH management and deployments.
- **`ansible`**: Configuration management and automation.
- **`requests`**: Interacting with APIs.
- **`schedule`**: Scheduling recurring tasks.
- **`dotenv`**: Managing environment variables.

You can use these modules to automate repetitive tasks, streamline processes, and enhance efficiency in DevOps practices. If you have a specific scenario or additional questions, feel free to ask!
